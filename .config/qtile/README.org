#+TITLE: Qtile config
#+PROPERTY: header-args :tangle config.py
#+STARTUP: overview

* Imports
#+begin_src python
from libqtile.config import Click, Drag, Key, KeyChord, Match, Screen, ScratchPad, DropDown, Group
from libqtile import bar, layout, widget, hook
import os, subprocess
from libqtile.lazy import lazy
from typing import List  # noqa: F401
#+end_src
* Variables
#+begin_src python
mod = 'mod3'
altMod = 'mod4'
term = 'alacritty'
alt_term = 'st'
browser = 'qutebrowser'
sft = 'shift'
ctrl = 'control'
dracula = [
    '282a36',
    'f8f8f2',
    'a89984',
    ]
colors = dracula
#+end_src
* Functions
The latest_group function allows me to go back to the previous group I was in.
#+begin_src python
def latest_group(qtile):
  qtile.current_screen.set_group(qtile.current_screen.previous_group)
#+end_src
* Keybindings
The [[https://tools.suckless.org/dmenu/scripts/dmenu_run_with_command_history/][dmenu_history]] is a script that sort by the recently used apps. I use the aur [[https://aur.archlinux.org/packages/dmenu2/][dmenu2]] package.
#+begin_src python
keys = [
    # Window Management
    Key([mod], 'n', lazy.layout.next()),
    Key([mod], 'space', lazy.next_layout()),
    Key([mod], 'p', lazy.layout.previous()),
    Key([mod, ctrl], 'h', lazy.layout.swap_left()),
    Key([mod, ctrl], 'l', lazy.layout.swap_right()),
    Key([mod, ctrl], 'j', lazy.layout.shuffle_down()),
    Key([mod, ctrl], 'k', lazy.layout.shuffle_up()),
    Key([mod, sft], 'h', lazy.layout.left()),
    Key([mod, sft], 'l', lazy.layout.right()),
    Key([mod, sft], 'j', lazy.layout.down()),
    Key([mod, sft], 'k', lazy.layout.up()),
    Key([mod], 'i', lazy.layout.grow()),
    Key([mod], 'o', lazy.layout.shrink()),
    Key([mod], 'c', lazy.window.kill()),

    # Qtile
    Key([mod], 'x', lazy.hide_show_bar("top")),
    Key([mod, ctrl], "r", lazy.restart()),
    Key([mod, ctrl], "c", lazy.reload_config()),

    # Notification
    Key([sft], 'space', lazy.spawn('dunstctl close')),

    # System
    Key([mod, ctrl], 'q', lazy.shutdown()),
    Key([altMod, sft], 'p', lazy.spawn('reboot')),
    Key([altMod, sft], 'l', lazy.spawn('lock-screen')),

    # Terminal
    Key([mod], 't', lazy.spawn(term)),
    Key([altMod], 't', lazy.spawn(alt_term)),

    # Applications
    Key([mod], 'w', lazy.spawn(browser)),
    KeyChord([mod, sft], 'w', [
        Key([], 'o', lazy.spawn('whatsapp-nativefier')),
        Key([], 'c', lazy.spawn('killall WhatsApp')),
      ]),
    Key([mod], 'r', lazy.spawn("dmenu_history -f -i -dim 0.3 -sb '#282a36' -nb '#44475a' -sf '#f8f8f2' -nf '#8be9fd' -fn FantasqueSansMono-12:light")),

    # Scripts
    Key([mod, sft], 'e', lazy.spawn('layout')),
    Key([altMod, sft], 's', lazy.spawn('scrot -p -q 100 /home/aedigo/Documents/Pictures/%Y-%m-%d-%T-screenshot.png')),
    Key([mod, sft], 'u', lazy.spawn('volume up')),
    Key([mod, sft], 'd', lazy.spawn('volume down')),
    Key([mod, sft], 'm', lazy.spawn('volume mute')),
    Key([mod, ctrl], 't', lazy.spawn('getHours')),
    Key([mod, ctrl], 'l', lazy.spawn('lockIt')),
    KeyChord([mod, sft], 'p', [
            Key([], 's', lazy.spawn('pymor -p 20')),
            Key([], 'c', lazy.spawn('pymor -c')),
            Key([], 'r', lazy.spawn('pymor -p 20 -l 3')),
        ]),

    # Terminal Based Apps
    Key([mod, sft], 'r', lazy.spawn(term + " -e ttrv")),
    Key([altMod], 'n', lazy.spawn(term + " -e n")),
    Key([mod], 'v', lazy.spawn(term + ' -e nvim /home/aedigo/.vimwiki/index.md')),
    Key([mod, sft], 't', lazy.spawn(term + ' -e bpytop')),

    # Others
    Key([mod], 'b', lazy.function(latest_group)),
]
#+end_src
* Groups
#+begin_src python
groups = [Group(i) for i in "asdfhjkl"]
for i in groups:
    keys.extend([
        Key([mod], i.name, lazy.group[i.name].toscreen(),
          desc="Switch to group {}".format(i.name)),
        Key([altMod], i.name, lazy.window.togroup(i.name),
          desc="move focused window to group {}".format(i.name)),
        Key([mod], 'u', lazy.group["scratchpad"].dropdown_toggle('term')),
    ])

groups.append(
    ScratchPad("scratchpad", [
        DropDown("term", "alacritty -t scratch", opacity=0.8, height=0.7),
        ]),
)
#+end_src
* Layouts
#+begin_src python
layouts = [
  layout.MonadTall(
    border_width=1,
    border_focus=colors[1],
    border_normal=colors[0],
    margin=2,
    single_border_width=0,
    single_margin=0,
  ),
  layout.Max(),
]
#+end_src
* Widgets
#+begin_src python
def open_calendar():
  subprocess.Popen(['calendarPy'])

def widgets():
  widgetLists = [
    widget.GroupBox(
        active=colors[1],
        background=colors[0],
        disable_drag=True,
        highlight_color=colors[1],
        highlight_method='line',
        inactive=colors[0],
        block_highlight_text_color=colors[0],
        margin_y=4,
    ),
    widget.Spacer(
        background=colors[0],
    ),
    widget.GenPollText(
      update_interval=1,
      func=lambda:subprocess.check_output("/home/aedigo/.bin/home_size").decode("utf-8"),
      background=colors[0],
      foreground=colors[1],
    ),
    widget.GenPollText(
      update_interval=1,
      func=lambda:subprocess.check_output("/home/aedigo/.bin/root_size").decode("utf-8"),
      background=colors[0],
      foreground=colors[1],
    ),
    widget.Sep(
      background=colors[0],
      foreground=colors[0],
      linewidth=0,
    ),
    widget.CPU(
      format='{load_percent}%',
      background=colors[0],
      foreground=colors[1],
    ),
    widget.Sep(
      background=colors[0],
      foreground=colors[0],
      linewidth=0,
    ),
    widget.Memory(
      background=colors[0],
      format='{MemUsed: .0f}{mm}',
    ),
    widget.Sep(
      background=colors[0],
      foreground=colors[0],
      linewidth=0,
    ),
    widget.Systray(
      background=colors[0],
      padding=6,
    ),
    widget.Sep(
      background=colors[0],
      foreground=colors[0],
      linewidth=6,
    ),
    widget.Clock(
      background=colors[0],
      format='%H:%M',
      mouse_callbacks={'Button1': open_calendar}
    ),
  ]
  return widgetLists;

widget_defaults = dict(
    font='sans',
    fontsize=12,
    padding=3,
)
extension_defaults = widget_defaults.copy()
#+end_src
* Screens
#+begin_src python
screens = [
  Screen(
    top=bar.Bar(
      widgets(),
      20
    ),
  ),
]
#+end_src
* Mouse
#+begin_src python
# Drag floating layouts.
mouse = [
    Drag([mod], "Button1", lazy.window.set_position_floating(),
         start=lazy.window.get_position()),
    Drag([mod], "Button3", lazy.window.set_size_floating(),
         start=lazy.window.get_size()),
    Click([mod], "Button2", lazy.window.bring_to_front())
]
#+end_src
* Attributes
#+begin_src python
follow_mouse_focus = True
auto_fullscreen = False
focus_on_window_activation = "smart"
auto_minimize = True
reconfigure_screens = True
bring_front_click = False
cursor_warp = False
wmname = "LG3D"
#+end_src
* Floating
#+begin_src python
floating_layout = layout.Floating(
    border_width=0,
    max_border_width=0,
    fullscreen_border_width=0,
    float_rules=[
      Match(wm_class='Steam'),
      Match(wm_class='pavucontrol'),
      Match(wm_class='whatsapp-nativefier-d40211'),
      ])
#+end_src
* Hooks
#+begin_src python
@hook.subscribe.startup_once
def autostart():
  home = os.path.expanduser('~')
  subprocess.Popen([home + '/.config/qtile/autostart.sh'])

@hook.subscribe.startup
def startup():
    top.show(False)
#+end_src
